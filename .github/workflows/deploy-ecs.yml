name: Build and Deploy Care to ECS

on:
  workflow_dispatch:
  push:
    branches:
      - vigneshhari/health-details
    paths-ignore:
      - "docs/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_DEFAULT_REGION: ap-south-1
  AWS_DEFAULT_OUTPUT: json
  ECS_SERVICE_BACKEND: "care-backend"
  ECS_SERVICE_CELERY: "care-celery"
  ECS_CLUSTER: "ohn-dev"
  CONTAINER_NAME_BACKEND: "care-backend"
  CONTAINER_NAME_WORKER: "care-celery-worker"
  CONTAINER_NAME_CRON: "care-celery-beat"

jobs:
  test:
    uses: ./.github/workflows/reusable-test.yml
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    with:
      event_name: ${{ github.event_name }}

  validate-aws-config:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Validate ECS resources
        id: validate-ecs
        run: |
          # Verify cluster exists
          if ! aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --query 'clusters[0].clusterArn' --output text; then
            echo "::error::ECS Cluster ${{ env.ECS_CLUSTER }} not found in region ${{ env.AWS_DEFAULT_REGION }}"
            exit 1
          fi

          # Verify services exist
          for service in ${{ env.ECS_SERVICE_BACKEND }} ${{ env.ECS_SERVICE_CELERY }}; do
            if ! aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services $service --query 'services[0].serviceArn' --output text; then
              echo "::error::ECS Service $service not found in cluster ${{ env.ECS_CLUSTER }}"
              exit 1
            fi
          done

  build:
    needs: [test, validate-aws-config]
    name: Build & Push to container registries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.ref == '' && 'kerala-care' || github.ref }}

      - name: Generate docker tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=dev-latest,enable=${{ github.ref == 'refs/heads/vigneshhari/health-details' }}
            type=raw,value=dev-latest-${{ github.run_number }}-{{date 'YYYYMMDDHHmmss'}}-{{sha}},enable=${{ github.ref == 'refs/heads/vigneshhari/health-details' }}
            type=raw,value=latest,enable=${{ github.event_name == 'workflow_dispatch' }}
            type=raw,value=latest-${{ github.run_number }},enable=${{ github.event_name == 'workflow_dispatch' }}
            type=semver,pattern={{version}}
          flavor: |
            latest=false

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-build-${{ hashFiles('Pipfile.lock', 'docker/prod.Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-build-

      - name: Build and push image
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/prod.Dockerfile
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            APP_VERSION=${{ github.sha }}
            ADDITIONAL_PLUGS=${{ env.ADDITIONAL_PLUGS }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Create Sentry release
        if: success() # Only create Sentry release if build succeeds
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          version: ${{ github.sha }}

      - name: Update cache
        if: always() # Run even if previous steps fail
        run: |
          if [ -d "/tmp/.buildx-cache-new" ]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

  deploy-kerala-care-staging:
    needs: build
    if: github.ref == 'refs/heads/vigneshhari/health-details'
    name: Deploy to ECS API Staging
    runs-on: ubuntu-latest
    environment:
      name: Staging-Kerala-Care
      url: https://api.care.kerala.gov.in

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Set Image Tag
        env:
          ECR_REGISTRY: ghcr.io/${{ github.repository }}
          IMAGE_TAG: latest-${{ github.run_number }}
        run: echo "IMAGE_VALUE=${ECR_REGISTRY}:${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Update and Deploy Celery Service
        run: |
          # Fetch current task definition
          TASK_DEF=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_SERVICE_CELERY }})
          if [ $? -ne 0 ]; then
            echo "Failed to fetch celery task definition"
            exit 1
          fi

          # Find the correct container definition index for worker
          CONTAINER_INDEX_WORKER=$(echo $TASK_DEF | jq --arg NAME "${{ env.CONTAINER_NAME_WORKER }}" '.taskDefinition.containerDefinitions | map(.name == $NAME) | index(true)')
          if [ "$CONTAINER_INDEX_WORKER" == "null" ]; then
            echo "Container ${{ env.CONTAINER_NAME_WORKER }} not found in task definition"
            exit 1
          fi

          # Find the correct container definition index for cron
          CONTAINER_INDEX_CRON=$(echo $TASK_DEF | jq --arg NAME "${{ env.CONTAINER_NAME_CRON }}" '.taskDefinition.containerDefinitions | map(.name == $NAME) | index(true)')
          if [ "$CONTAINER_INDEX_CRON" == "null" ]; then
            echo "Container ${{ env.CONTAINER_NAME_CRON }} not found in task definition"
            exit 1
          fi

          # Update the image for worker
          NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "ghcr.io/${{ github.repository }}:latest-${{ github.run_number }}" --arg INDEX "$CONTAINER_INDEX_WORKER" '.taskDefinition | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) | .containerDefinitions[$INDEX | tonumber].image = $IMAGE')

          # Update the image for cron
          NEW_TASK_DEF=$(echo $NEW_TASK_DEF | jq --arg IMAGE "ghcr.io/${{ github.repository }}:latest-${{ github.run_number }}" --arg INDEX "$CONTAINER_INDEX_CRON" '.containerDefinitions[$INDEX | tonumber].image = $IMAGE')

          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)

          # Update service
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE_CELERY }} --task-definition $NEW_TASK_DEF_ARN --force-new-deployment

      - name: Update and Deploy Backend Service
        run: |
          # Fetch current task definition
          TASK_DEF=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_SERVICE_BACKEND }})
          if [ $? -ne 0 ]; then
            echo "Failed to fetch backend task definition"
            exit 1
          fi

          CONTAINER_INDEX=$(echo $TASK_DEF | jq --arg NAME "${{ env.CONTAINER_NAME_BACKEND }}" '.taskDefinition.containerDefinitions | map(.name == $NAME) | index(true)')
          if [ "$CONTAINER_INDEX" == "null" ]; then
            echo "Container ${{ env.CONTAINER_NAME_BACKEND }} not found in task definition"
            exit 1
          fi

          NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "${{ env.IMAGE_VALUE }}" --arg INDEX "$CONTAINER_INDEX" '.taskDefinition | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) | .containerDefinitions[$INDEX | tonumber].image = $IMAGE')

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)

          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE_BACKEND }} --task-definition $NEW_TASK_DEF_ARN --force-new-deployment

      - name: Wait for services stability
        run: |
          for service in ${{ env.ECS_SERVICE_BACKEND }} ${{ env.ECS_SERVICE_CELERY }}; do
            aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services $service
          done
